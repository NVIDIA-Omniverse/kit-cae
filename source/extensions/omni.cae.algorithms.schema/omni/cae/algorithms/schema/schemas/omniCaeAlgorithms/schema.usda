#usda 1.0
(
    """
        Schema for CAE algorithms. These are provided as an example and not
        intended to be official schemas for visualization operations / algorithms.
    """
    subLayers = [
        @usd/schema.usda@,
    ]
)

# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
#  its affiliates is strictly prohibited.

over "GLOBAL" (
    customData = {
        string libraryName = "omniCaeAlgorithms"
        string libraryPath = "."
        string libraryPrefix = "OmniCaeAlgorithms"
        bool skipCodeGeneration = true
    }
)
{
}

class "CaeAlgorithmsBoundingBoxAPI" (
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
        string className = "BoundingBoxAPI"
    }
    doc = """Applies to a BasisCurve to render a bounding box of the dataset"""
)
{
    rel omni:cae:algorithms:boundingBox:datasets (
        doc = "Specifies the CaeDataSet prims. Multiple can be specified to use a union bounding box."
        displayName = "Dataset(s)"
        customData = {
            string apiName = "datasets"
        }
    )

    float omni:cae:algorithms:boundingBox:width = 0.1 (
        doc = "Specifies the width to use for the bounding box."
        displayName = "Width"
        customData = {
            string apiName = "width"
        }
    )
}

class "CaeAlgorithmsPointsAPI" (
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
        string className = "PointsAPI"
    }
    doc = """Applies to a Points prim to render as a point cloud."""
)
{
    rel omni:cae:algorithms:points:dataset (
        doc = "Specifies the CaeDataSet prim"
        displayName = "Dataset"
        displayGroup = "Data"
        customData = {
            string apiName = "dataset"
        }
    )

    rel omni:cae:algorithms:points:colors (
        doc = "Specifies the field to use for coloring."
        displayName = "Colors"
        displayGroup = "Data"
        customData = {
            string apiName = "color"
        }
    )

    uniform int omni:cae:algorithms:points:maxCount = 10000000 (
        doc = "Specifies the maximum number of points to render. Use 0 to indicate all points."
        displayName ="Max Count"
        displayGroup = "Data"
        customData = {
            string apiName = "maxCount"
        }
    )

    uniform float omni:cae:algorithms:points:width = 0.001 (
        doc = "Specifies the point width"
        displayName = "Width"
        displayGroup = "Width Mapping"
        customData = {
            string apiName = "width"
        }
    )

    rel omni:cae:algorithms:points:widths (
        doc = "Specifies the field to use for coloring."
        displayName = "Widths"
        displayGroup = "Width Mapping"
        customData = {
            string apiName = "widths"
        }
    )

    uniform float2 omni:cae:algorithms:points:widthsRamp = (0.5, 1.5) (
        doc = "Specifies the point width ramp. Specified as a scale factor applied the '...:width' field."
        displayName = "Widths Ramp"
        displayGroup = "Width Mapping"
        customData = {
            string apiName = "widthsRamp"
        }
    )

    uniform float2 omni:cae:algorithms:points:widthsDomain = (0.0, 1.0) (
        doc = "Specifies the domain for the point width ramp."
        displayName = "Widths Domain"
        displayGroup = "Width Mapping"
        customData = {
            string apiName = "widthsDomain"
        }
    )
}

class "CaeAlgorithmsExternalFacesAPI" (
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
        string className = "ExternalFacesAPI"
    }
    doc = """Applies to a Mesh prim to render external faces for a dataset."""
)
{
    rel omni:cae:algorithms:externalFaces:dataset (
        doc = "Specifies the CaeDataSet prim"
        displayName = "Dataset"
        customData = {
            string apiName = "dataset"
        }
    )

    rel omni:cae:algorithms:externalFaces:colors (
        doc = "Specifies the optional field to use for coloring."
        displayName = "Colors"
        customData = {
            string apiName = "color"
        }
    )
}


class "CaeAlgorithmsStreamlinesAPI" (
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
        string className = "StreamlinesAPI"
    }
    doc = "Applies to a BasisCurves prim to generate streamlines."
)
{
    rel omni:cae:algorithms:streamlines:dataset (
        displayName = "Dataset"
        displayGroup = "Data"
        doc = "Specifies the CaeDataSet prim."
        customData = {
            string apiName = "dataset"
        }
    )

    rel omni:cae:algorithms:streamlines:seeds (
        doc = "Specifies a UsdGeomPointBased subtype prim that can be used as seed point sources."
        displayGroup = "Data"
        displayName = "Seeds"
        customData = {
            string apiName = "seeds"
        }
    )

    rel omni:cae:algorithms:streamlines:velocity (
        doc = "Specifies the name of the field to use as velocity field."
        displayGroup = "Data"
        displayName = "Velocity"
        customData = {
            string apiName = "velocity"
        }
    )

    rel omni:cae:algorithms:streamlines:colors (
        doc = "Specifies the field to use for coloring."
        displayGroup = "Data"
        displayName = "Colors"
        customData = {
            string apiName = "colors"
        }
    )

    float omni:cae:algorithms:streamlines:dX  = 0.5 (
        doc = "Specifies the stepping distance."
        displayName = "dX"
        displayGroup = "Advection"
        customData = {
            string apiName = "dx"
        }
    )

    int omni:cae:algorithms:streamlines:maxLength  = 50 (
        doc = "Specifies maximum length for a streamline."
        displayName = "Max Length"
        displayGroup = "Advection"
        customData = {
            string apiName = "maxLength"
        }
    )

    uniform float omni:cae:algorithms:streamlines:width = 0.025 (
        doc = "Specifies the streamline width"
        displayName = "Width"
        displayGroup = "Appearance"
        customData = {
            string apiName = "width"
        }
    )
}


class "CaeAlgorithmsGlyphsAPI" (
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "singleApply"
        string className = "GlyphsAPI"
    }
    doc = """Applies to a PointInstancer prim to glyphs for a dataset."""
)
{
    rel omni:cae:algorithms:glyphs:dataset (
        doc = "Specifies the CaeDataSet prim"
        displayName = "Dataset"
        customData = {
            string apiName = "dataset"
        }
    )

    rel omni:cae:algorithms:glyphs:orientation (
        doc = "Specifies the vector field to use as orientations"
        displayName = "Orientation"
        customData = {
            string apiName = "orientation"
        }
    )

    rel omni:cae:algorithms:glyphs:colors (
        doc = "Specifies the field to use for coloring."
        displayName = "Colors"
        customData = {
            string apiName = "colors"
        }
    )

    uniform token omni:cae:algorithms:glyphs:shape = "arrow" (
        doc = "Specifies the glyph shape to use."
        allowedTokens = ["arrow", "cone", "sphere"]
        displayName = "Shape"
        customData = {
            string apiName = "shape"
        }
    )

    uniform int omni:cae:algorithms:glyphs:maxCount = 100000 (
        doc = "Specifies the maximum number of glyphs to render."
        displayName ="Max Count"
        customData = {
            string apiName = "maxCount"
        }
    )
}
