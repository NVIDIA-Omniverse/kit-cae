# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
#  its affiliates is strictly prohibited.

[repo]

# Use the Kit Template repo configuration as a base. Only override things specific to the repo.
import_configs = [
    "${root}/_repo/deps/repo_kit_tools/kit-template/repo.toml",
    "${root}/_repo/deps/repo_kit_tools/kit-template/repo-external-app.toml",
]

# Repository Name
name = "kit-cae"

[repo_build]
# These are necessary to avoid a repo_build failure where the source/apps directory
# is expected to always exist.
fetch."platform:linux-x86_64".before_pull_commands = [
    ["mkdir", "--parents", "${root}/source/apps"],
]

# Mute this command, don't emit to console.
fetch."platform:windows-x86_64".before_pull_commands = [
    ["powershell", "-Command", "New-Item -ItemType Directory -Path ${root}/source/apps -ErrorAction SilentlyContinue", ";", "Write-Host 'Done'"],
]

# If caching do not try to cache extensions. These will come from the NGC Kit Extension Registry.
fetch."token:cache==true".after_pull_commands = []

# List of packman dependency files to pull (in order), with target-platform passed in as a key.
fetch.packman_target_files_to_pull = [
    "${root}/tools/deps/kit-sdk.packman.xml",
    "${root}/tools/deps/kit-sdk-deps.packman.xml",
    "${root}/tools/deps/kit-cae-deps.packman.xml",
]

[repo_build.build]
enabled = true

[repo_build.msbuild]
# If set to true will attempt to link to host's Visual Studio and Windows SDK installations.
# This is needed if C++ compilation is needed on Windows, and repo_build.build.enabled is set to true.
link_host_toolchain = true

# Filter on Visual Studio version e.g.: Visual Studio 2022. Empty string will match all years and prioritize the newest.
# You can manually set the version to a specific version e.g "vs2022" or "vs2019".
# Alternatively, you pass it as a command line argument as follows:
# > repo.bat --set-token vs_version=vs2019 build ..., or
# > repo.bat --set-token vs_version=vs2022 build ...
vs_version = ""

"token:vs_version!=null".vs_version = "${vs_version}"


# Visual Studio path; This will be used if the user would like to point to a specific VS installation rather than rely on heuristic locating.
# vs_path = "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\"

# Filter specifically to "Enterprise", "Professional", or "Community" editions of Visual Studio
# vs_edition = "Community"

# Filter by Visual Studio installations that have installed this version of the MSVC compiler.
# msvc_version = "v142"

# Filter by Visual Studio installations that ship with MSBuild of this major version.
# msbuild_version = "17"

# Windows SDK version
# winsdk_version = "10.0.17763.0"

# Windows SDK path; This will prevent needing to dynamically locate an installation by guesswork.
# winsdk_path = "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.17763.0"

# Disable linbuild until we have a public image available.
[repo_build.docker]
enabled = false

[repo_build.fetch.pip]
# List of pip files to pip install from (in order)
files_to_pull = [
    "${root}/tools/deps/pip.toml"
]

# Do not gather Python dependency licenses
# this has to be disabled since it depends on internal tools
licensing_enabled = false

# Do not try to publish a pip cache to S3
publish_pip_cache = false

########################################################################################################################
# Extensions precacher
########################################################################################################################

[repo_precache_exts]
# Apps to run and precache
apps = [
"${root}/source/apps/omni.cae.kit",
"${root}/source/apps/omni.cae_vtk.kit",
"${root}/source/apps/omni.cae_streaming.kit"
]

registries = [
# PUBLIC REGISTRIES - UNCOMMENT BEFORE STAGING TO GITHUB
    { name = "kit/default", url = "https://ovextensionsprod.blob.core.windows.net/exts/kit/prod/${kit_version_major}/shared" },
    { name = "kit/sdk", url = "https://ovextensionsprod.blob.core.windows.net/exts/kit/prod/sdk/${kit_version_short}/${kit_git_hash}" },
]


########################################################################################################################
# Packaging
########################################################################################################################

[repo_package.packages.fat_package]
root = "_build/$${platform}/$${config}"
archive_name = "${conf:repo.name}-fat"
# omniverse_flow_version_scheme sets package name to the format:
# archive_name@{build_version}+{gitbranch}.{builder_id}.{githash}.{build_environment}.{host_platform}.{archive_format}
# e.g. kit-cae-thin@2024.1.0+custom-app-stuff.0.12345678.local.linux-x86_64.zip
omniverse_flow_version_scheme=true
package_per_config = true                   # By default we only build + package release.
append_config = true                        # Set to true to append release/debug config to package name.
archive_format = "zip"                      # We support "7z", "zip", "tar.gz", "tar.bz2"
windows_max_path_length = 0
#build_version = "${file:${config_root}/tools/VERSION.md}"  # It's ignored when omniverse_flow_version_scheme is true


files = [
    ["**"],
]
files_exclude = [
    ["_*/**"],
    [".*/**"],
    ["**/*.pdb"],
    ["**/*.exp"],
    ["baseapp/**"],
    ["extsbuild/**"],
    ["cache/**"],
    ["data/**"],
    ["logs/**"],
    ["apps/kit.portable"],
    ["**/__pycache__"],
    ["**/_repo/**"],
]
"linux-x86_64".files_strip = []


[repo_package.packages.thin_package]
root = "_build/$${platform}/$${config}"
archive_name = "${conf:repo.name}-thin"
omniverse_flow_version_scheme=true
package_per_config = true
append_config = true
archive_format = "zip"
windows_max_path_length = 0
#build_version = "${file:${config_root}/tools/VERSION.md}"

files = [
    ["**"],
]
files_exclude = [
    ["_*/**"],
    [".*/**"],
    ["**/*.pdb"],
    ["**/*.exp"],
    ["kit/**"],
    ["extscache/**"],
    ["extsbuild/**"],
    ["baseapp/**"],
    ["cache/**"],
    ["data/**"],
    ["logs/**"],
    ["apps/kit.portable"],
    ["**/__pycache__"],
    ["**/_repo/**"],
    ["PACKAGE-INFO.yaml"],
]
"linux-x86_64".files_strip = []


########################################################################################################################
# Template tool configuration
########################################################################################################################
[repo_kit_template]
extension_templates_config = "templates/templates.toml"


########################################################################################################################
# Application launching configuration
########################################################################################################################
[repo_launch]
type_ordering = [
    "ApplicationTemplate",
    "ApplicationLayerTemplate",
]


